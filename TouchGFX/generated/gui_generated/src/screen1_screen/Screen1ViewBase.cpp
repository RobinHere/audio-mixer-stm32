/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
    sliderValueChangedCallback(this, &Screen1ViewBase::sliderValueChangedCallbackHandler)
{
    __background.setPosition(0, 0, 480, 320);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    box1.setPosition(0, 0, 480, 320);
    box1.setColor(touchgfx::Color::getColorFromRGB(48, 73, 112));
    add(box1);

    outputSlider.setXY(35, 48);
    outputSlider.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_FILLER_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_ROUNDED_DARK_ID));
    outputSlider.setupVerticalSlider(9, 12, 0, 0, 200);
    outputSlider.setValueRange(-20, 20);
    outputSlider.setValue(0);
    outputSlider.setNewValueCallback(sliderValueChangedCallback);
    add(outputSlider);

    inL1Slider.setXY(105, 48);
    inL1Slider.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_FILLER_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_ROUNDED_DARK_ID));
    inL1Slider.setupVerticalSlider(9, 12, 0, 0, 200);
    inL1Slider.setValueRange(-20, 20);
    inL1Slider.setValue(0);
    inL1Slider.setNewValueCallback(sliderValueChangedCallback);
    add(inL1Slider);

    inR1Slider.setXY(175, 48);
    inR1Slider.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_FILLER_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_ROUNDED_DARK_ID));
    inR1Slider.setupVerticalSlider(9, 12, 0, 0, 200);
    inR1Slider.setValueRange(-20, 20);
    inR1Slider.setValue(0);
    inR1Slider.setNewValueCallback(sliderValueChangedCallback);
    add(inR1Slider);

    inL2Slider.setXY(245, 48);
    inL2Slider.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_FILLER_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_ROUNDED_DARK_ID));
    inL2Slider.setupVerticalSlider(9, 12, 0, 0, 200);
    inL2Slider.setValueRange(-20, 20);
    inL2Slider.setValue(0);
    inL2Slider.setNewValueCallback(sliderValueChangedCallback);
    add(inL2Slider);

    inR2Slider.setXY(315, 48);
    inR2Slider.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_FILLER_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_ROUNDED_DARK_ID));
    inR2Slider.setupVerticalSlider(9, 12, 0, 0, 200);
    inR2Slider.setValueRange(-20, 20);
    inR2Slider.setValue(0);
    inR2Slider.setNewValueCallback(sliderValueChangedCallback);
    add(inR2Slider);

    outputGainText.setXY(10, 126);
    outputGainText.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    outputGainText.setLinespacing(0);
    outputGainText.setRotation(touchgfx::TEXT_ROTATE_270);
    outputGainText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7XPN));
    add(outputGainText);

    inL1GainText.setXY(79, 102);
    inL1GainText.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    inL1GainText.setLinespacing(0);
    inL1GainText.setRotation(touchgfx::TEXT_ROTATE_270);
    inL1GainText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TOSE));
    add(inL1GainText);

    inR1GainText.setXY(149, 102);
    inR1GainText.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    inR1GainText.setLinespacing(0);
    inR1GainText.setRotation(touchgfx::TEXT_ROTATE_270);
    inR1GainText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JVVL));
    add(inR1GainText);

    inL2GainText.setXY(219, 102);
    inL2GainText.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    inL2GainText.setLinespacing(0);
    inL2GainText.setRotation(touchgfx::TEXT_ROTATE_270);
    inL2GainText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_L74J));
    add(inL2GainText);

    inR2GainText.setXY(289, 102);
    inR2GainText.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    inR2GainText.setLinespacing(0);
    inR2GainText.setRotation(touchgfx::TEXT_ROTATE_270);
    inR2GainText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_I3EC));
    add(inR2GainText);

    dbText1.setXY(25, 33);
    dbText1.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    dbText1.setLinespacing(0);
    dbText1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QL88));
    add(dbText1);

    dbText2.setXY(94, 33);
    dbText2.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    dbText2.setLinespacing(0);
    dbText2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YLR0));
    add(dbText2);

    dbText3.setXY(164, 33);
    dbText3.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    dbText3.setLinespacing(0);
    dbText3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_U0ES));
    add(dbText3);

    dbText4.setXY(234, 33);
    dbText4.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    dbText4.setLinespacing(0);
    dbText4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T16R));
    add(dbText4);

    dbText5.setXY(304, 33);
    dbText5.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    dbText5.setLinespacing(0);
    dbText5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_58ZM));
    add(dbText5);

    dbText6.setXY(25, 272);
    dbText6.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    dbText6.setLinespacing(0);
    dbText6.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RCIE));
    add(dbText6);

    dbText7.setXY(94, 272);
    dbText7.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    dbText7.setLinespacing(0);
    dbText7.setTypedText(touchgfx::TypedText(T___SINGLEUSE_99Z1));
    add(dbText7);

    dbText8.setXY(164, 272);
    dbText8.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    dbText8.setLinespacing(0);
    dbText8.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YMZU));
    add(dbText8);

    dbText9.setXY(234, 272);
    dbText9.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    dbText9.setLinespacing(0);
    dbText9.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KDPP));
    add(dbText9);

    dbText10.setXY(304, 272);
    dbText10.setColor(touchgfx::Color::getColorFromRGB(2, 146, 230));
    dbText10.setLinespacing(0);
    dbText10.setTypedText(touchgfx::TypedText(T___SINGLEUSE_928V));
    add(dbText10);
}

Screen1ViewBase::~Screen1ViewBase()
{

}

void Screen1ViewBase::setupScreen()
{

}

void Screen1ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &outputSlider)
    {
        //AdjustOutputGainVariable
        //When outputSlider value changed execute C++ code
        //Execute C++ code
        //Convert Db Gain multlplier into amplitude gain mulitplier and update it
        UpdateGainFromSlider(GAIN_OUTPUT, std::pow(10.f, (float)value / 20.f));
    }
    if (&src == &inL1Slider)
    {
        //AdjustInL1GainVariable
        //When inL1Slider value changed execute C++ code
        //Execute C++ code
        UpdateGainFromSlider(GAIN_CH1L, std::pow(10.f, (float)value / 20.f));
    }
    if (&src == &inR1Slider)
    {
        //AdjustInR1GainVariable
        //When inR1Slider value changed execute C++ code
        //Execute C++ code
        UpdateGainFromSlider(GAIN_CH1R, std::pow(10.f, (float)value / 20.f));
    }
    if (&src == &inL2Slider)
    {
        //AdjustInL2GainVariable
        //When inL2Slider value changed execute C++ code
        //Execute C++ code
        UpdateGainFromSlider(GAIN_CH2L, std::pow(10.f, (float)value / 20.f));
    }
    if (&src == &inR2Slider)
    {
        //AdjustInR2GainVariable
        //When inR2Slider value changed execute C++ code
        //Execute C++ code
        UpdateGainFromSlider(GAIN_CH2R, std::pow(10.f, (float)value / 20.f));
    }
}
