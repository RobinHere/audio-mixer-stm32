/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen2ViewBase::Screen2ViewBase() :
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler),
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &Screen2ViewBase::sliderValueChangedCallbackHandler)
{
    __background.setPosition(0, 0, 480, 320);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_GLASS_THEME_IMAGES_BACKGROUNDS_480X480_FLOATING_RINGS_ID));
    scalableImage1.setPosition(-42, 0, 522, 320);
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::BILINEAR_INTERPOLATION);
    add(scalableImage1);

    feedackText.setXY(102, 125);
    feedackText.setColor(touchgfx::Color::getColorFromRGB(255, 20, 220));
    feedackText.setLinespacing(0);
    feedackText.setRotation(touchgfx::TEXT_ROTATE_270);
    feedackText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_61JQ));
    add(feedackText);

    wetnessText.setXY(162, 128);
    wetnessText.setColor(touchgfx::Color::getColorFromRGB(255, 20, 220));
    wetnessText.setLinespacing(0);
    wetnessText.setRotation(touchgfx::TEXT_ROTATE_270);
    wetnessText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OIBR));
    add(wetnessText);

    equalizerText.setXY(398, 126);
    equalizerText.setColor(touchgfx::Color::getColorFromRGB(255, 20, 220));
    equalizerText.setLinespacing(0);
    equalizerText.setRotation(touchgfx::TEXT_ROTATE_270);
    equalizerText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HL1O));
    add(equalizerText);

    dTimeText.setXY(222, 118);
    dTimeText.setColor(touchgfx::Color::getColorFromRGB(255, 20, 220));
    dTimeText.setLinespacing(0);
    dTimeText.setRotation(touchgfx::TEXT_ROTATE_270);
    dTimeText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_R0AL));
    add(dTimeText);

    onOffText.setXY(275, 111);
    onOffText.setColor(touchgfx::Color::getColorFromRGB(255, 20, 220));
    onOffText.setLinespacing(0);
    onOffText.setRotation(touchgfx::TEXT_ROTATE_270);
    onOffText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G25F));
    add(onOffText);

    feedbackSlider.setXY(120, 48);
    feedbackSlider.setBitmaps(touchgfx::Bitmap(BITMAP_GLASS_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_LIGHT_THEME_IMAGES_WIDGETS_LINEPROGRESS_FILLERS_PLAIN_THIN_SMALL_ACTION_90_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_ROUNDED_ACTIVE_ID));
    feedbackSlider.setupVerticalSlider(9, 12, 0, 0, 200);
    feedbackSlider.setValueRange(0, 100);
    feedbackSlider.setValue(50);
    feedbackSlider.setNewValueCallback(sliderValueChangedCallback);
    add(feedbackSlider);

    wetnessSlider.setXY(180, 48);
    wetnessSlider.setBitmaps(touchgfx::Bitmap(BITMAP_GLASS_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_LIGHT_THEME_IMAGES_WIDGETS_LINEPROGRESS_FILLERS_PLAIN_THIN_SMALL_ACTION_90_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_ROUNDED_ACTIVE_ID));
    wetnessSlider.setupVerticalSlider(9, 12, 0, 0, 200);
    wetnessSlider.setValueRange(0, 100);
    wetnessSlider.setValue(50);
    wetnessSlider.setNewValueCallback(sliderValueChangedCallback);
    add(wetnessSlider);

    dTimeSlider.setXY(240, 48);
    dTimeSlider.setBitmaps(touchgfx::Bitmap(BITMAP_GLASS_THEME_IMAGES_WIDGETS_SLIDER_VERTICAL_THIN_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_LIGHT_THEME_IMAGES_WIDGETS_LINEPROGRESS_FILLERS_PLAIN_THIN_SMALL_ACTION_90_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THIN_ROUNDED_ACTIVE_ID));
    dTimeSlider.setupVerticalSlider(9, 12, 0, 0, 200);
    dTimeSlider.setValueRange(0, 100);
    dTimeSlider.setValue(50);
    dTimeSlider.setNewValueCallback(sliderValueChangedCallback);
    add(dTimeSlider);

    nextScreenText.setXY(64, 113);
    nextScreenText.setColor(touchgfx::Color::getColorFromRGB(255, 20, 220));
    nextScreenText.setLinespacing(0);
    nextScreenText.setRotation(touchgfx::TEXT_ROTATE_90);
    nextScreenText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AZSF));
    add(nextScreenText);

    previousScreenButton.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_FF14DC_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_FF14DC_SVG_ID));
    previousScreenButton.setIconXY(17, 24);
    previousScreenButton.setAction(flexButtonCallback);
    previousScreenButton.setPosition(0, 112, 64, 97);
    add(previousScreenButton);

    nextScreenButton.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_FORWARD_IOS_50_50_FF14DC_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_FORWARD_IOS_50_50_FF14DC_SVG_ID));
    nextScreenButton.setIconXY(-1, 24);
    nextScreenButton.setAction(flexButtonCallback);
    nextScreenButton.setPosition(416, 112, 64, 97);
    add(nextScreenButton);

    toggleButton1.setXY(293, 143);
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_SMALL_ROUND_SMALL_OFF_LIGHT_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_SMALL_ROUND_SMALL_ON_ACTIVE_ID));
    toggleButton1.setAction(buttonCallback);
    add(toggleButton1);
}

Screen2ViewBase::~Screen2ViewBase()
{

}

void Screen2ViewBase::setupScreen()
{
    toggleButton1.forceState(screen2State.getButtonState());
    feedbackSlider.setValue(screen2State.getFeedbackSliderValue());
    wetnessSlider.setValue(screen2State.getWetnessSliderValue());
    dTimeSlider.setValue(screen2State.getDelayTimeSliderValue());
}

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &previousScreenButton)
    {
        //ChangeToScreen1
        //When previousScreenButton clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenWipeTransitionWest();
    }
    if (&src == &nextScreenButton)
    {
        //ChangeToScreen3
        //When nextScreenButton clicked change screen to Screen3
        //Go to Screen3 with screen transition towards East
        application().gotoScreen3ScreenWipeTransitionEast();
    }
}

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &toggleButton1)
    {
        //ToggleDelay
        //When toggleButton1 clicked execute C++ code
        //Execute C++ code
        static DelayFxStatus buttonOnOff = DELAY_OFF;
        if (buttonOnOff == DELAY_ON) {
            buttonOnOff = DELAY_OFF;
        } else {
            buttonOnOff = DELAY_ON;
        }
        DelayFxToggleOnOff(buttonOnOff);
        screen2State.setButtonState(buttonOnOff);
    }
}

void Screen2ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &feedbackSlider)
    {
        //updateFeedback
        //When feedbackSlider value changed execute C++ code
        //Execute C++ code
        DelayFxUpdateFeedback((float)value / 100.0f);
        screen2State.setFeedbackSliderValue(value);
    }
    if (&src == &wetnessSlider)
    {
        //updateWetness
        //When wetnessSlider value changed execute C++ code
        //Execute C++ code
        DelayFxUpdateWetness((float)value / 100.0f);
        screen2State.setWetnessSliderValue(value);
    }
    if (&src == &dTimeSlider)
    {
        //updateDelayTime
        //When dTimeSlider value changed execute C++ code
        //Execute C++ code
        DelayFxUpdateDelayTime((float)value / 100.0f);
        screen2State.setDelayTimeSliderValue(value);
    }
}
